# # Все программы залить на GitHub и выслать ссылку на репозиторий с
# # экзаменом преподавателю

# 1. Напишите функцию, которая будет принимать номер кредитной карты и
# показывать только последние 4 цифры. Остальные цифры должны заменяться
# звездочками
# def x(card): return '*' * len(card[:-4]) + card[-4:]

# 2. Напишите функцию, которая проверяет: является ли слово палиндромом
# возвращает обратную строку
# def revers(x):
#     return x[::-1]
# def palindrom(x):
#     a = revers(x)
#     if d == a:
#         return True
#     return False
# d = "dirttrid"
# n = palindrom(d)

# 3. Решите задачу
# Класс Tomato:
# 1. Создайте класс Tomato
# 2. Создайте статическое свойство states, которое будет содержать все стадии
# созревания помидора
# 3. Создайте метод __init__(), внутри которого будут определены два динамических
# protected свойства: 1) _index - передается параметром и 2) _state - принимает первое
# значение из словаря states
# 4. Создайте метод grow(), который будет переводить томат на следующую стадию
# созревания
# 5. Создайте метод is_ripe(), который будет проверять, что томат созрел (достиг
# последней стадии созревания)

# class Tomato:
#     # Статическое свойство
#     default_states ={1 : 'Незрелый',
#                      2 : 'Среднезрелый',
#                      3 : 'Созрел'}
#
#     def __init__(self, index, state = dict.keys()):
#         # Динамические поля
#         self._index = index
#         self._state = state
#
#     def __grow__(self):
#
#     def __is_ripe__(self):

# Класс TomatoBush
# 1. Создайте класс TomatoBush
# 2. Определите метод __init__(), который будет принимать в качестве параметра
# количество томатов и на его основе будет создавать список объектов класса
# Tomato. Данный список будет храниться внутри динамического свойства tomatoes.
# 3. Создайте метод grow_all(), который будет переводить все объекты из списка
# томатов на следующий этап созревания
# 4. Создайте метод all_are_ripe(), который будет возвращать True, если все томаты из
# списка стали спелыми
# 5. Создайте метод give_away_all(), который будет чистить список томатов после
# сбора урожая
#
# class TomatoBush:
#
#     def __init__(self, tomatoes):
##         self.tomatoes = tomatoes
#
#     def __grow_all__(self):
#
#     def __all_are_ripe__(self):
#
#     def __give_away_all(self):

# Класс Gardener
# 1. Создайте класс Gardener
# 2. Создайте метод __init__(), внутри которого будут определены два динамических
# свойства: 1) name - передается параметром, является публичным и 2) _plant -
# принимает объект класса Tomato, является protected
# 3. Создайте метод work(), который заставляет садовника работать, что позволяет
# растению становиться более зрелым
# 4. Создайте метод harvest(), который проверяет, все ли плоды созрели. Если все -
# садовник собирает урожай. Если нет - метод печатает предупреждение.
# 5. Создайте статический метод knowledge_base(), который выведет в консоль справку
# по садоводству.
# Тесты:
# 1. Вызовите справку по садоводству
# 2. Создайте объекты классов TomatoBush и Gardener
# 3. Используя объект класса Gardener, поухаживайте за кустом с помидорами
# 4. Попробуйте собрать урожай
# 5. Если томаты еще не дозрели, продолжайте ухаживать за ними
# 6. Соберите урожай
